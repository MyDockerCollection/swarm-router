
global
    user haproxy
    group haproxy
    maxconn 10000
    log /dev/log local0 warning
    stats socket /run/haproxy.sock mode 600 level user expose-fd listeners
    stats timeout 30s
    tune.ssl.default-dh-param 2048
    ssl-default-bind-options no-sslv3 no-tlsv10
    ssl-default-bind-ciphers ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:RSA+AESGCM:RSA+AES:!aNULL:!MD5:!DSS

defaults
    log global
    mode tcp
    option tcplog
    option clitcpka
    option dontlognull
    option forwardfor
    retries 3
    timeout client 60s
    timeout server 600s
    timeout connect 5s
    timeout queue 30s
    timeout http-request 5s
    timeout http-keep-alive 30s
    default-server init-addr last,libc,none

resolvers docker
    nameserver dns 127.0.0.11:53
    resolve_retries 20
    timeout retry 1s
    hold timeout 5s
    hold valid 5s

listen stats
    bind *:1111
    mode http
    stats enable
    stats show-desc swarm-router status
    stats uri /

frontend swarm-router-http{{ range $port := split $.Env.HTTP_PORTS " " }}
    bind *:{{ $port }}{{ end }}
    mode http
    use_backend %[req.hdr(host),lower]
    default_backend swarm-router-http

frontend swarm-router-tls{{ range $port := split $.Env.TLS_PORTS " " }}
    bind *:{{ $port }}{{ if $.Env.TLS_CERT }} ssl crt {{ $.Env.TLS_CERT }}{{ end }}{{ end }}
    mode tcp
    tcp-request inspect-delay 1s
    tcp-request content accept if { req.ssl_hello_type 1 }
    use_backend %[{{ if $.Env.TLS_CERT }}ssl_fc_sni,lower{{ else }}req.ssl_sni,lower{{ end }}]
    default_backend swarm-router-tls

backend swarm-router-http
    mode http
    server swarm-router-http 127.0.0.1:{{ $.Env.HTTP_SWARM_ROUTER_PORT }} check

backend swarm-router-tls
    mode tcp
    server swarm-router-tls 127.0.0.1:{{ $.Env.TLS_SWARM_ROUTER_PORT }} check

{{ range $endpoint, $encryption := $.Endpoints }}backend {{ $endpoint }}
    {{ if and $encryption (not $.Env.TLS_CERT) }}mode tcp{{ else }}mode http{{ end }}
    server {{ $endpoint }} {{ getBackendHostname $endpoint }}:{{ getBackendPort $endpoint $encryption }} check inter 10s resolvers docker
{{ end }}
