global
    maxconn 4096

defaults
    log global
    mode tcp
    option tcplog
    option clitcpka
    option dontlognull
    retries 3
    timeout client 7200s
    timeout server 7200s
    timeout connect 60s

listen stats
    bind *:1111
    mode http
    stats enable
    stats show-desc sni-router status
    stats uri /

{{ if $.Env.ROUTER_HTTP_PORT }}
frontend sni-router-http
    bind *:{{ $.Env.ROUTER_HTTP_PORT }}
    mode http
    {{ range $host, $containers := groupBy $ "Env.VIRTUAL_HOST" }}
    {{ range $container := $containers }}
    {{ if (or $container.Env.VIRTUAL_HTTP_PORT (not $container.Env.VIRTUAL_TCP_PORT))}}
    use_backend httpbackend_{{ $container.Name }} if { hdr_dom(host) -i {{ $host }} }
    {{ end }}
    {{ end }}
    {{ end }}

{{ range $host, $containers := groupBy $ "Env.VIRTUAL_HOST" }}
{{ range $container := $containers }}
{{ if (or $container.Env.VIRTUAL_HTTP_PORT (not $container.Env.VIRTUAL_TCP_PORT))}}
backend httpbackend_{{ $container.Name }}
    mode http
    {{ $port := coalesce $container.Env.VIRTUAL_HTTP_PORT "80" }}
    {{ $address := where $container.Addresses "Port" $port | first }}
    {{ $network := index $container.Networks 0 }}
    {{ if and $network.IP $address.Port }}
    server server_{{ $container.Name }} {{ $network.IP }}:{{ $address.Port }} check
    {{ end }}
{{ end }}
{{ end }}
{{ end }}

{{ end }}


{{ if $.Env.ROUTER_TCP_PORT }}
frontend sni-router-tcp
    bind *:{{ $.Env.ROUTER_TCP_PORT }}
    mode tcp
    tcp-request inspect-delay 5s
    tcp-request content accept if { req.ssl_hello_type 1 }
    {{ range $host, $containers := groupBy $ "Env.VIRTUAL_HOST" }}
    {{ range $container := $containers }}
    {{ if $container.Env.VIRTUAL_TCP_PORT }}
    use_backend tcpbackend_{{ $container.Name }} if { req.ssl_sni -i {{ $host }} }
    {{ end }}
    {{ end }}
    {{ end }}

{{ range $host, $containers := groupBy $ "Env.VIRTUAL_HOST" }}
{{ range $container := $containers }}
{{ if $container.Env.VIRTUAL_TCP_PORT }}
backend tcpbackend_{{ $container.Name }}
    mode tcp
    {{ $address := where $container.Addresses "Port" $container.Env.VIRTUAL_TCP_PORT | first }}
    {{ $network := index $container.Networks 0 }}
    {{ if and $network.IP $address.Port }}
    server server_{{ $container.Name }} {{ $network.IP }}:{{ $address.Port }} check
    {{ end }}
{{ end }}
{{ end }}
{{ end }}

{{ end }}


{{ if $.Env.ROUTER_DATABASE_PORT }}
frontend sni-router-database
    bind *:{{ $.Env.ROUTER_DATABASE_PORT }}
    mode tcp
    tcp-request inspect-delay 5s
    tcp-request content accept if { req.ssl_hello_type 1 }
    {{ range $host, $containers := groupBy $ "Env.VIRTUAL_HOST" }}
    {{ range $container := $containers }}
    {{ if $container.Env.VIRTUAL_DATABASE_PORT }}
    use_backend tcpbackend_{{ $container.Name }} if { req.ssl_sni -i {{ $host }} }
    {{ end }}
    {{ end }}
    {{ end }}

{{ range $host, $containers := groupBy $ "Env.VIRTUAL_HOST" }}
{{ range $container := $containers }}
{{ if $container.Env.VIRTUAL_DATABASE_PORT }}
backend tcpbackend_{{ $container.Name }}
    mode tcp
    {{ $address := where $container.Addresses "Port" $container.Env.VIRTUAL_DATABASE_PORT | first }}
    {{ $network := index $container.Networks 0 }}
    {{ if and $network.IP $address.Port }}
    server server_{{ $container.Name }} {{ $network.IP }}:{{ $address.Port }} check
    {{ end }}
{{ end }}
{{ end }}
{{ end }}

{{ end }}


{{ if $.Env.ROUTER_MESSAGEQUEUE_PORT }}
frontend sni-router-messagequeue
    bind *:{{ $.Env.ROUTER_MESSAGEQUEUE_PORT }}
    mode tcp
    tcp-request inspect-delay 5s
    tcp-request content accept if { req.ssl_hello_type 1 }
    {{ range $host, $containers := groupBy $ "Env.VIRTUAL_HOST" }}
    {{ range $container := $containers }}
    {{ if $container.Env.VIRTUAL_MESSAGEQUEUE_PORT }}
    use_backend tcpbackend_{{ $container.Name }} if { req.ssl_sni -i {{ $host }} }
    {{ end }}
    {{ end }}
    {{ end }}

{{ range $host, $containers := groupBy $ "Env.VIRTUAL_HOST" }}
{{ range $container := $containers }}
{{ if $container.Env.VIRTUAL_MESSAGEQUEUE_PORT }}
backend tcpbackend_{{ $container.Name }}
    mode tcp
    {{ $address := where $container.Addresses "Port" $container.Env.VIRTUAL_MESSAGEQUEUE_PORT | first }}
    {{ $network := index $container.Networks 0 }}
    {{ if and $network.IP $address.Port }}
    server server_{{ $container.Name }} {{ $network.IP }}:{{ $address.Port }} check
    {{ end }}
{{ end }}
{{ end }}
{{ end }}

{{ end }}
